{"version":3,"file":"background.js","mappings":";;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,0BAA0B,mCAAmC;AAC7D;AACA,gDAAgD,6CAA6C;AAC7F;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA,8CAA8C,4BAA4B;AAC1E,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW,gBAAgB,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mCAAmC;AACpE;AACA,uDAAuD,mDAAmD;AAC1G,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6CAA6C;AACjF;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0BAA0B;AACzD;AACA,KAAK;AACL,GAAG;AACH,C","sources":["webpack://saver/./src/background.js"],"sourcesContent":["\"use strict\";\r\n\r\n// Load stored data on extension open\r\nchrome.runtime.onInstalled.addListener(function () {\r\n  loadItems();\r\n});\r\n\r\nfunction loadItems() {\r\n  // Load stored data on extension open\r\n  chrome.storage.local.get(\"yourItemList\", function (data) {\r\n    const storedList = data.yourItemList || [];\r\n    console.log(\"Loaded items:\", storedList);\r\n  });\r\n}\r\n\r\nchrome.runtime.onInstalled.addListener(function () {\r\n  // Add a context menu item for selected text\r\n  chrome.contextMenus.create({\r\n    title: \"Сохранить\",\r\n    id: \"save\",\r\n    contexts: [\"selection\", \"image\", \"video\", \"link\"],\r\n  });\r\n});\r\n\r\nchrome.contextMenus.onClicked.addListener(function (info, tab) {\r\n  if (info.menuItemId == \"save\") {\r\n    const selected = info.selectionText || info.srcUrl || info.linkUrl || info.videoUrl || \"\";\r\n    if(isImage(selected)) {\r\n      chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n        const activeTab = tabs[0];\r\n        chrome.tabs.sendMessage(activeTab.id, { command: \"processImage\", imageUrl: selected });\r\n        console.log(\"Send message to content with imgurl:\", selected);\r\n      });\r\n    } else {\r\n      saveItem(info);\r\n    }\r\n  }\r\n});\r\n\r\n// Используем chrome.commands.onCommand для обработки горячих клавиш\r\nchrome.commands.onCommand.addListener(function (command) {\r\n  if (command === \"saveItemCommand\") {\r\n    // Отправляем сообщение контент-скрипту с запросом выделенного текста\r\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n      const activeTab = tabs[0];\r\n      chrome.tabs.sendMessage(activeTab.id, { command: \"getSelectedText\" });\r\n    });\r\n  }\r\n});\r\n\r\n// Обработчик сообщений от контент-скрипта\r\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n  if (request.command === \"saveItem\" && request.selectedText) {\r\n    // Создаем новый элемент с выделенным текстом\r\n    const newItem = {\r\n      selectionText: request.selectedText,\r\n      createdAt: \"\",\r\n    };\r\n    // Сохраняем новый элемент с использованием существующей функции\r\n    saveItem(newItem);\r\n  } else if (request.command === \"imageProcessed\" && request.formattedText) {\r\n    console.log(\"got formatted text\");\r\n    const newItem = {\r\n      createdAt: new Date().getTime(),\r\n      title: \"\",\r\n      itemData: request.formattedText,\r\n      pinned: false,\r\n      hide: false,\r\n      fav: false,\r\n      color: \"\",\r\n      tab: \"\",\r\n      list: \"\",\r\n    };\r\n\r\n    // Сохраняем новый элемент\r\n    saveNewItem(newItem);\r\n  }\r\n});\r\n\r\n// const SERVER_URL = 'http://localhost:3000'; // Замените на ваш домен и порт\r\n\r\n// chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n//   if (request.command === \"processImage\" && request.imageUrl) {\r\n//     const imageUrl = request.imageUrl;\r\n\r\n//     // Отправляем запрос на наш сервер, чтобы получить изображение\r\n//     fetch(`${SERVER_URL}/getImage?url=${imageUrl}`)\r\n//       .then(response => response.blob())\r\n//       .then(blob => {\r\n//         // Преобразуем Blob в Data URL\r\n//         const reader = new FileReader();\r\n//         reader.onloadend = function () {\r\n//           const dataUrl = reader.result;\r\n\r\n//           // Отправляем текст в content.js\r\n//           chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n//             const activeTab = tabs[0];\r\n//             chrome.tabs.sendMessage(activeTab.id, { command: \"imageProcessed\", formattedText: dataUrl });\r\n//           });\r\n//         };\r\n//         reader.readAsDataURL(blob);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('Ошибка при обработке изображения:', error);\r\n//       });\r\n//   }\r\n// });\r\n\r\n// // Добавьте этот код после вашего существующего кода\r\n// chrome.contextMenus.onClicked.addListener(function (info, tab) {\r\n//   if (info.menuItemId == \"save\") {\r\n//     // Извлекаем URL изображения со страницы\r\n//     const imageUrl = info.srcUrl;\r\n\r\n//     // Отправляем команду на обработку изображения в background.js\r\n//     chrome.runtime.sendMessage({ command: \"processImage\", imageUrl: imageUrl });\r\n//   }\r\n// });\r\n\r\n\r\n\r\nfunction saveItem(info) {\r\n  const selected = info.selectionText || info.srcUrl || info.linkUrl || info.videoUrl || \"\";\r\n\r\n  let itemData;\r\n  itemData = selected;\r\n\r\n  const newItem = {\r\n    createdAt: new Date().getTime(),\r\n    title: \"\",\r\n    itemData: itemData,\r\n    pinned: false,\r\n    hide: false,\r\n    fav: false,\r\n    color: \"\",\r\n    tab: \"\",\r\n    list: \"\",\r\n  };\r\n\r\n  saveNewItem(newItem);\r\n}\r\nfunction formatImageAsText(imageUrl) {\r\n  return new Promise((resolve, reject) => {\r\n    // Создаем изображение\r\n    const img = document.createElement(\"img\");\r\n\r\n    // Обработчик, вызываемый после загрузки изображения\r\n    img.onload = function () {\r\n      // Создаем элемент canvas для рисования изображения\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n\r\n      // Получаем контекст для рисования\r\n      const context = canvas.getContext(\"2d\");\r\n\r\n      // Рисуем изображение на canvas\r\n      context.drawImage(img, 0, 0);\r\n\r\n      // Получаем Base64-код изображения\r\n      const imageBase64 = canvas.toDataURL(\"image/png\");\r\n\r\n      // Разрешаем обещание с Base64-кодом\r\n      resolve(imageBase64);\r\n    };\r\n\r\n    // Обработчик ошибки загрузки изображения\r\n    img.onerror = function () {\r\n      reject(new Error(\"Ошибка загрузки изображения\"));\r\n    };\r\n\r\n    // Устанавливаем URL изображения\r\n    img.crossOrigin = \"anonymous\"; // Разрешаем использование изображений с другого домена\r\n    img.src = imageUrl;\r\n  });\r\n}\r\n\r\nfunction isImage(url) {\r\n  // Простая проверка расширения URL на изображение\r\n  return url.match(/\\.(jpeg|jpg|gif|png|webp)$/i) !== null;\r\n}\r\n\r\nfunction saveNewItem(item) {\r\n  // Add your logic to save the item to your list using chrome.storage.local\r\n  // Modify this function according to your storage requirements\r\n  console.log(\"Saving new item:\", item);\r\n  chrome.storage.local.get(\"yourItemList\", function (data) {\r\n    const storedList = data.yourItemList || [];\r\n\r\n    // Check if the item with the same createdAt already exists\r\n    const existingItemIndex = storedList.findIndex(\r\n      (existingItem) => existingItem.createdAt === item.createdAt\r\n    );\r\n\r\n    if (existingItemIndex !== -1) {\r\n      // If the item with the same createdAt exists, remove it from the list\r\n      storedList.splice(existingItemIndex, 1);\r\n    }\r\n\r\n    // Add the new item to the beginning of the list\r\n    storedList.push(item);\r\n\r\n    chrome.storage.local.set({ yourItemList: storedList }, function () {\r\n      console.log(\"Item saved successfully:\", item);\r\n    });\r\n  });\r\n}"],"names":[],"sourceRoot":""}