{"version":3,"file":"background.js","mappings":";;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,0BAA0B,mCAAmC;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA,8CAA8C,4BAA4B;AAC1E,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D;AACA;AACA,MAAM;AACN;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0BAA0B;AACzD;AACA,KAAK;AACL,GAAG;AACH","sources":["webpack://saver/./src/background.js"],"sourcesContent":["\"use strict\";\r\n\r\nchrome.runtime.onInstalled.addListener(function () {\r\n  // Add a context menu item for selected text\r\n  chrome.contextMenus.create({\r\n    title: \"Сохранить\",\r\n    id: \"save\",\r\n    contexts: [\"selection\", \"image\", \"video\", \"link\"],\r\n  });\r\n});\r\nchrome.contextMenus.onClicked.addListener(function (info, tab) {\r\n  if (info.menuItemId == \"save\") {\r\n    const selected =\r\n      info.selectionText || info.srcUrl || info.linkUrl || info.videoUrl || \"\";\r\n    if (isImage(selected)) {\r\n      chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n        const activeTab = tabs[0];\r\n        chrome.tabs.sendMessage(activeTab.id, {\r\n          command: \"processImage\",\r\n          imageUrl: selected,\r\n        });\r\n        console.log(\"Send message to content with imgurl:\", selected);\r\n      });\r\n    } else {\r\n      saveItem(info);\r\n    }\r\n  }\r\n});\r\nchrome.commands.onCommand.addListener(function (command) {\r\n  if (command === \"saveItemCommand\") {\r\n    // Отправляем сообщение контент-скрипту с запросом выделенного текста\r\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n      const activeTab = tabs[0];\r\n      chrome.tabs.sendMessage(activeTab.id, { command: \"getSelectedText\" });\r\n    });\r\n  }\r\n});\r\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n  if (request.command === \"saveItem\" && request.selectedText) {\r\n    // Создаем новый элемент с выделенным текстом\r\n    const newItem = {\r\n      createdAt: new Date().getTime(),\r\n      title: \"\",\r\n      itemData: request.selectedText,\r\n      pinned: false,\r\n      hide: false,\r\n      fav: false,\r\n      color: \"\",\r\n      tab: \"\",\r\n      list: \"\",\r\n    };\r\n    // Сохраняем новый элемент с использованием существующей функции\r\n    saveItem(newItem);\r\n  } else if (request.command === \"imageProcessed\" && request.formattedText) {\r\n    console.log(\"got formatted text\");\r\n    const newItem = {\r\n      createdAt: new Date().getTime(),\r\n      title: \"\",\r\n      itemData: request.formattedText,\r\n      pinned: false,\r\n      hide: false,\r\n      fav: false,\r\n      color: \"\",\r\n      tab: \"\",\r\n      list: \"\",\r\n    };\r\n\r\n    // Сохраняем новый элемент\r\n    saveNewItem(newItem);\r\n  }\r\n});\r\nfunction saveItem(info) {\r\n  const selected =\r\n    info.selectionText || info.srcUrl || info.linkUrl || info.videoUrl || \"\";\r\n\r\n  let itemData;\r\n  itemData = selected;\r\n\r\n  const newItem = {\r\n    createdAt: new Date().getTime(),\r\n    title: \"\",\r\n    itemData: itemData,\r\n    pinned: false,\r\n    hide: false,\r\n    fav: false,\r\n    color: \"\",\r\n    tab: \"\",\r\n    list: \"\",\r\n  };\r\n\r\n  saveNewItem(newItem);\r\n}\r\n\r\nfunction isImage(url) {\r\n  return url.match(/\\.(jpeg|jpg|gif|png|webp)$/i) !== null;\r\n}\r\n\r\nfunction dataURItoBlob(dataURI) {\r\n  const byteString = atob(dataURI.split(',')[1]);\r\n  const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n  const arrayBuffer = new ArrayBuffer(byteString.length);\r\n  const uint8Array = new Uint8Array(arrayBuffer);\r\n\r\n  for (let i = 0; i < byteString.length; i++) {\r\n    uint8Array[i] = byteString.charCodeAt(i);\r\n  }\r\n\r\n  return new Blob([arrayBuffer], { type: mimeString });\r\n}\r\n\r\nfunction sendFileToServer(item) {\r\n  const serverEndpoint = \"http://localhost:3000/sendToTelegram\";\r\n\r\n  try {\r\n    if (item.itemData.startsWith(\"data:image\")) {\r\n      const blob = dataURItoBlob(item.itemData);\r\n      const formData = new FormData();\r\n      formData.append('file', blob, 'file.png');\r\n      formData.append('createdAt', item.createdAt);\r\n\r\n      fetch(serverEndpoint, { method: 'POST', body: formData })\r\n        .then(handleResponse)\r\n        .catch(handleError);\r\n    } else {\r\n      fetch(serverEndpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'text/plain' },\r\n        body: item.itemData,\r\n      })\r\n      .then(handleResponse)\r\n      .catch(handleError);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error formatting data:', error.message);\r\n  }\r\n}\r\nfunction handleResponse(response) {\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! Status: ${response.status}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nfunction handleError(error) {\r\n  console.error('Error sending data to server:', error.message);\r\n  handleNetworkError(error);\r\n}\r\n\r\nfunction handleNetworkError(error) {\r\n  if (error.message.includes('ENOTFOUND')) {\r\n    console.error('Ошибка: Не удалось разрешить DNS. Возможно, проблемы с интернет-соединением.');\r\n  } else {\r\n    console.error('Другая ошибка сети:', error.message);\r\n  }\r\n}\r\n\r\nfunction saveNewItem(item) {\r\n  // sendToServer(item.itemData);\r\n\r\n  sendFileToServer(item);\r\n\r\n  console.log(\"Saving new item:\", item);\r\n  chrome.storage.local.get(\"yourItemList\", function (data) {\r\n    const storedList = data.yourItemList || [];\r\n    storedList.push(item);\r\n\r\n    chrome.storage.local.set({ yourItemList: storedList }, function () {\r\n      console.log(\"Item saved successfully:\", item);\r\n    });\r\n  });\r\n}\r\n"],"names":[],"sourceRoot":""}