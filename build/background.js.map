{"version":3,"file":"background.js","mappings":";;;;;;;AAAa;;AAEb;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA,8CAA8C,4BAA4B;AAC1E,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ,0BAA0B,SAAS;AACnC,IAAI;AACJ,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,0BAA0B;AACzD;AACA,KAAK;AACL,GAAG;AACH,C","sources":["webpack://saver/./src/background.js"],"sourcesContent":["\"use strict\";\n\n// Load stored data on extension open\nchrome.runtime.onInstalled.addListener(function () {\n  loadItems();\n});\n\nfunction loadItems() {\n  // Load stored data on extension open\n  chrome.storage.local.get(\"yourItemList\", function (data) {\n    const storedList = data.yourItemList || [];\n    console.log(\"Loaded items:\", storedList);\n  });\n}\n\nchrome.runtime.onInstalled.addListener(function () {\n  // Add a context menu item for selected text\n  chrome.contextMenus.create({\n    title: \"Сохранить текст\",\n    id: \"save-selected-text\",\n    contexts: [\"selection\"],\n  });\n\n  // Add a context menu item for images\n  chrome.contextMenus.create({\n    title: \"Сохранить изображение\",\n    id: \"save-image\",\n    contexts: [\"image\"],\n  });\n\n  // Add a context menu item for clickable links\n  chrome.contextMenus.create({\n    title: \"Сохранить ссылку\",\n    id: \"save-link\",\n    contexts: [\"link\"],\n  });\n});\n\nchrome.contextMenus.onClicked.addListener(function (info, tab) {\n  if (info.menuItemId == \"save-selected-text\") {\n    saveItem(info);\n  } else if (info.menuItemId == \"save-image\") {\n    saveItem(info);\n  } else if (info.menuItemId == \"save-link\") {\n    saveItem(info);\n  }\n});\n\n// Используем chrome.commands.onCommand для обработки горячих клавиш\nchrome.commands.onCommand.addListener(function (command) {\n  if (command === \"saveItemCommand\") {\n    // Отправляем сообщение контент-скрипту с запросом выделенного текста\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n      const activeTab = tabs[0];\n      chrome.tabs.sendMessage(activeTab.id, { command: \"getSelectedText\" });\n    });\n  }\n});\n\n// Обработчик сообщений от контент-скрипта\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n  if (request.command === \"saveItem\" && request.selectedText) {\n    // Создаем новый элемент с выделенным текстом\n    const newItem = {\n      selectionText: request.selectedText,\n      createdAt: \"\",\n    };\n\n    // Сохраняем новый элемент с использованием существующей функции\n    saveItem(newItem);\n  }\n});\n\nfunction saveItem(info) {\n  const selectedText = info.selectionText || \"\";\n  const imageUrl = info.srcUrl || \"\";\n  const linkUrl = info.linkUrl || \"\";\n\n  let itemData;\n\n  if (selectedText) {\n    itemData = selectedText;\n  } else if (imageUrl) {\n    itemData = `(imgUrl:${imageUrl})`;\n  } else if (linkUrl) {\n    itemData = `(linkUrl:${linkUrl})`;\n  }\n  // Add the new item to your list (modify this according to your list structure)\n  const newItem = {\n    itemData: itemData,\n    createdAt: \"\",\n  };\n\n  // Save the new item to local storage or wherever you store your list\n  saveNewItem(newItem);\n}\n\nfunction saveNewItem(item) {\n  // Add your logic to save the item to your list using chrome.storage.local\n  // Modify this function according to your storage requirements\n  console.log(\"Saving new item:\", item);\n  chrome.storage.local.get(\"yourItemList\", function (data) {\n    const storedList = data.yourItemList || [];\n\n    // Assign a unique index to the new item\n    item.createdAt = new Date().getTime();\n\n    // Check if the item with the same createdAt already exists\n    const existingItemIndex = storedList.findIndex(\n      (existingItem) => existingItem.createdAt === item.createdAt\n    );\n\n    if (existingItemIndex !== -1) {\n      // If the item with the same createdAt exists, remove it from the list\n      storedList.splice(existingItemIndex, 1);\n    }\n\n    // Add the new item to the beginning of the list\n    storedList.push(item);\n\n    chrome.storage.local.set({ yourItemList: storedList }, function () {\n      console.log(\"Item saved successfully:\", item);\n    });\n  });\n}"],"names":[],"sourceRoot":""}