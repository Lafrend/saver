function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { CopyOutlined } from '@ant-design/icons';
import { Space, Tooltip, message, ConfigProvider } from 'antd';
import React, { useContext, useMemo } from 'react';
import { useStyle } from "./style";
import classNames from 'classnames';
import { writeCopyText, fillWith0x, formatAddress } from "../utils";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
export var Address = function Address(props) {
  var ellipsis = props.ellipsis,
    address = props.address,
    copyable = props.copyable,
    tooltip = props.tooltip,
    _props$format = props.format,
    format = _props$format === void 0 ? false : _props$format,
    children = props.children;
  var _message$useMessage = message.useMessage(),
    _message$useMessage2 = _slicedToArray(_message$useMessage, 2),
    messageApi = _message$useMessage2[0],
    contextHolder = _message$useMessage2[1];
  var _useContext = useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var prefixCls = getPrefixCls('web3-address');
  var _useStyle = useStyle(prefixCls),
    wrapSSR = _useStyle.wrapSSR,
    hashId = _useStyle.hashId;
  var mergedFormat = useMemo(function () {
    if (typeof format === 'function') {
      return format;
    }
    if (format) {
      return formatAddress;
    }
    return function (input) {
      return input;
    };
  }, [format]);
  var isEllipsis = !!ellipsis;
  var _ref = _typeof(ellipsis) !== 'object' ? {
      headClip: 6,
      tailClip: 4
    } : ellipsis,
    _ref$headClip = _ref.headClip,
    headClip = _ref$headClip === void 0 ? 6 : _ref$headClip,
    _ref$tailClip = _ref.tailClip,
    tailClip = _ref$tailClip === void 0 ? 4 : _ref$tailClip;
  if (!address) {
    return null;
  }
  var filledAddress = fillWith0x(address);
  var formattedAddress = mergedFormat(filledAddress);
  var displayTooltip = tooltip === undefined || tooltip === true ? filledAddress : tooltip;
  return wrapSSR( /*#__PURE__*/_jsxs(_Fragment, {
    children: [contextHolder, /*#__PURE__*/_jsxs(Space, {
      className: classNames(prefixCls, hashId),
      children: [/*#__PURE__*/_jsx(Tooltip, {
        title: displayTooltip,
        children: /*#__PURE__*/_jsx("span", {
          className: "".concat(prefixCls, "-text"),
          children: children !== null && children !== void 0 ? children : isEllipsis ? "".concat(filledAddress.slice(0, headClip), "...").concat(filledAddress.slice(-tailClip)) : formattedAddress
        })
      }), copyable && /*#__PURE__*/_jsx(CopyOutlined, {
        title: "Copy Address",
        onClick: function onClick() {
          writeCopyText(filledAddress).then(function () {
            messageApi.success('Address Copied!');
          });
        }
      })]
    })]
  }));
};