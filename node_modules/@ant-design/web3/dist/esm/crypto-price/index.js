import { CryptoPriceBalance } from "./balance";
import { ConfigProvider } from 'antd';
import { useContext } from 'react';
import { useStyle } from "./style";
import { Mainnet } from '@ant-design/web3-assets';
import useProvider from "../hooks/useProvider";
import { jsx as _jsx } from "react/jsx-runtime";
export var CryptoPrice = function CryptoPrice(props) {
  var _chain$nativeCurrency, _chain$nativeCurrency2, _chain$nativeCurrency3, _chain$nativeCurrency4, _chain$nativeCurrency5;
  var _useContext = useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var prefixCls = getPrefixCls('web3-crypto-balance');
  var _useStyle = useStyle(prefixCls),
    wrapSSR = _useStyle.wrapSSR,
    hashId = _useStyle.hashId;
  var className = props.className,
    userConfigChain = props.chain;
  var _useProvider = useProvider({
      chain: userConfigChain
    }),
    _useProvider$chain = _useProvider.chain,
    chain = _useProvider$chain === void 0 ? Mainnet : _useProvider$chain;
  var _props$value = props.value,
    value = _props$value === void 0 ? 0n : _props$value,
    _props$symbol = props.symbol,
    symbol = _props$symbol === void 0 ? (_chain$nativeCurrency = (_chain$nativeCurrency2 = chain.nativeCurrency) === null || _chain$nativeCurrency2 === void 0 ? void 0 : _chain$nativeCurrency2.symbol) !== null && _chain$nativeCurrency !== void 0 ? _chain$nativeCurrency : 'ETH' : _props$symbol,
    _props$decimals = props.decimals,
    decimals = _props$decimals === void 0 ? (_chain$nativeCurrency3 = (_chain$nativeCurrency4 = chain.nativeCurrency) === null || _chain$nativeCurrency4 === void 0 ? void 0 : _chain$nativeCurrency4.decimals) !== null && _chain$nativeCurrency3 !== void 0 ? _chain$nativeCurrency3 : 18 : _props$decimals,
    fixed = props.fixed,
    _props$icon = props.icon,
    icon = _props$icon === void 0 ? false : _props$icon;
  return wrapSSR( /*#__PURE__*/_jsx(CryptoPriceBalance, {
    fixed: fixed,
    value: value,
    symbol: symbol,
    decimals: decimals,
    className: className,
    hashId: hashId,
    icon: icon === true ? (_chain$nativeCurrency5 = chain.nativeCurrency) === null || _chain$nativeCurrency5 === void 0 ? void 0 : _chain$nativeCurrency5.icon : icon
  }));
};
CryptoPrice.displayName = 'CryptoPrice';