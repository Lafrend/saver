function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { useStyle as useAntdStyle } from "../../theme/useStyle";
import { TinyColor } from '@ctrl/tinycolor';
var genConnectButtonStyle = function genConnectButtonStyle(token) {
  var _token$componentCls, _$concat2, _$concat3, _ref;
  return _ref = {}, _defineProperty(_ref, token.componentCls, (_token$componentCls = {}, _defineProperty(_token$componentCls, "".concat(token.componentCls, "-content"), {
    display: 'inline-block'
  }), _defineProperty(_token$componentCls, "".concat(token.componentCls, "-content-inner"), {
    display: 'flex',
    alignItems: 'center',
    flexDirection: 'row'
  }), _defineProperty(_token$componentCls, "".concat(token.componentCls, "-avatar"), _defineProperty({
    height: "".concat(token.lineHeight, "em"),
    aspectRatio: '1 / 1'
  }, "".concat(token.antCls, "-avatar"), {
    height: '100%',
    width: '100%',
    marginTop: -2
  })), _defineProperty(_token$componentCls, "".concat(token.componentCls, "-chain-select"), {
    display: 'inline-block',
    marginRight: token.marginXS
  }), _token$componentCls)), _defineProperty(_ref, "".concat(token.componentCls, "-chain-select-dropdown"), {
    border: "1px solid ".concat(token.colorBorder),
    borderRadius: token.borderRadiusLG,
    marginBlockStart: 12
  }), _defineProperty(_ref, "".concat(token.componentCls, "-chain-select-button"), {
    padding: 0
  }), _defineProperty(_ref, "".concat(token.componentCls, "-chain-select-placeholder"), {
    padding: "4px 15px"
  }), _defineProperty(_ref, "".concat(token.componentCls, "-profile-modal"), (_$concat2 = {}, _defineProperty(_$concat2, "".concat(token.antCls, "-modal-content"), {
    padding: token.padding
  }), _defineProperty(_$concat2, "".concat(token.antCls, "-avatar"), {
    width: token.sizeXXL,
    height: token.sizeXXL,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  }), _defineProperty(_$concat2, "".concat(token.antCls, "-avatar-image"), {
    width: token.sizeXXL,
    height: token.sizeXXL
  }), _defineProperty(_$concat2, "&-footer", _defineProperty({
    display: 'flex',
    marginTop: token.margin
  }, "".concat(token.antCls, "-btn"), {
    flex: 1
  })), _defineProperty(_$concat2, "&-name", {
    color: token.colorTextHeading,
    fontSize: token.fontSizeLG
  }), _defineProperty(_$concat2, "".concat(token.componentCls, "-chain-icon"), {
    fontSize: token.sizeXXL
  }), _defineProperty(_$concat2, "".concat(token.componentCls, "-default-icon"), {
    fontSize: token.sizeLG
  }), _defineProperty(_$concat2, "".concat(token.antCls, "-web3-address"), {
    color: token.colorTextTertiary
  }), _$concat2)), _defineProperty(_ref, "".concat(token.componentCls, "-tooltip"), (_$concat3 = {}, _defineProperty(_$concat3, "".concat(token.componentCls, "-tooltip-title"), {
    color: new TinyColor(token.colorWhite).setAlpha(0.65).toRgbString(),
    fontSize: token.fontSizeSM
  }), _defineProperty(_$concat3, "".concat(token.componentCls, "-tooltip-content"), {
    fontSize: token.fontSizeLG,
    color: token.colorWhite,
    textAlign: 'justify'
  }), _$concat3)), _ref;
};
export function useStyle(prefixCls) {
  return useAntdStyle('ConnectButton', function (token) {
    var proListToken = _objectSpread(_objectSpread({}, token), {}, {
      componentCls: ".".concat(prefixCls)
    });
    return [genConnectButtonStyle(proListToken)];
  });
}