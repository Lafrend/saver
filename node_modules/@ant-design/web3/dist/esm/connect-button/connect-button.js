var _excluded = ["onConnectClick", "onDisconnectClick", "availableChains", "onSwitchChain", "tooltip", "chain", "account", "avatar", "profileModal", "onMenuItemClick", "actionsMenu", "loading", "onClick", "balance", "className", "locale"];
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useContext, useMemo, useState } from 'react';
import { Avatar, Button, ConfigProvider, Dropdown, Space, message, Divider } from 'antd';
import classNames from 'classnames';
import { Address } from "../address";
import { ConnectButtonTooltip } from "./tooltip";
import { ChainSelect } from "./chain-select";
import { ProfileModal } from "./profile-modal";
import { useStyle } from "./style";
import { fillWith0x, writeCopyText } from "../utils";
import { CryptoPrice } from "../crypto-price";
import { CopyOutlined, LoginOutlined, UserOutlined } from '@ant-design/icons';
import useIntl from "../hooks/useIntl";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export var ConnectButton = function ConnectButton(props) {
  var onConnectClick = props.onConnectClick,
    onDisconnectClick = props.onDisconnectClick,
    availableChains = props.availableChains,
    onSwitchChain = props.onSwitchChain,
    tooltip = props.tooltip,
    chain = props.chain,
    account = props.account,
    avatar = props.avatar,
    _props$profileModal = props.profileModal,
    profileModal = _props$profileModal === void 0 ? true : _props$profileModal,
    onMenuItemClick = props.onMenuItemClick,
    _props$actionsMenu = props.actionsMenu,
    actionsMenu = _props$actionsMenu === void 0 ? false : _props$actionsMenu,
    loading = props.loading,
    _onClick = props.onClick,
    balance = props.balance,
    className = props.className,
    locale = props.locale,
    restProps = _objectWithoutProperties(props, _excluded);
  var intl = useIntl('ConnectButton', locale);
  var _useContext = useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var prefixCls = getPrefixCls('web3-connect-button');
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    profileOpen = _useState2[0],
    setProfileOpen = _useState2[1];
  var _useStyle = useStyle(prefixCls),
    wrapSSR = _useStyle.wrapSSR,
    hashId = _useStyle.hashId;
  var _message$useMessage = message.useMessage(),
    _message$useMessage2 = _slicedToArray(_message$useMessage, 2),
    messageApi = _message$useMessage2[0],
    contextHolder = _message$useMessage2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showMenu = _useState4[0],
    setShowMenu = _useState4[1];
  var buttonText = intl.getMessage(intl.messages.connect);
  if (account) {
    buttonText = account !== null && account !== void 0 && account.name && !balance ? account === null || account === void 0 ? void 0 : account.name : /*#__PURE__*/_jsx(Address, {
      tooltip: false,
      ellipsis: true,
      address: account.address,
      children: balance ? /*#__PURE__*/_jsx(CryptoPrice, _objectSpread({
        icon: true
      }, balance)) : undefined
    });
  }
  var buttonProps = _objectSpread({
    style: props.style,
    size: props.size,
    type: props.type,
    ghost: props.ghost,
    loading: loading,
    className: classNames(className, prefixCls, hashId),
    onClick: function onClick(e) {
      setShowMenu(false);
      if (account && !profileOpen && profileModal) {
        setProfileOpen(true);
      } else {
        onConnectClick === null || onConnectClick === void 0 || onConnectClick();
      }
      _onClick === null || _onClick === void 0 || _onClick(e);
    }
  }, restProps);
  var renderChainSelect = function renderChainSelect() {
    if (availableChains && availableChains.length > 1) {
      return /*#__PURE__*/_jsx(ChainSelect, {
        hashId: hashId,
        onSwitchChain: onSwitchChain,
        currentChain: chain,
        chains: availableChains
      });
    }
    return null;
  };
  var chainSelect = renderChainSelect();
  var buttonInnerText = /*#__PURE__*/_jsx("div", {
    className: "".concat(prefixCls, "-content"),
    children: /*#__PURE__*/_jsxs("div", {
      className: "".concat(prefixCls, "-content-inner"),
      children: [/*#__PURE__*/_jsx("div", {
        className: "".concat(prefixCls, "-text"),
        children: buttonText
      }), avatar && /*#__PURE__*/_jsxs(_Fragment, {
        children: [/*#__PURE__*/_jsx(Divider, {
          type: "vertical"
        }), /*#__PURE__*/_jsx("div", {
          className: "".concat(prefixCls, "-avatar"),
          children: /*#__PURE__*/_jsx(Avatar, _objectSpread({}, avatar))
        })]
      })]
    })
  });
  var buttonContent = chainSelect ? /*#__PURE__*/_jsxs(Space.Compact, {
    children: [chainSelect, /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread({}, buttonProps), {}, {
      children: buttonInnerText
    }))]
  }) : /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread({}, buttonProps), {}, {
    children: buttonInnerText
  }));
  var profileModalContent = /*#__PURE__*/_jsx(ProfileModal, {
    intl: intl,
    open: profileOpen,
    __hashId__: hashId,
    onDisconnect: function onDisconnect() {
      setProfileOpen(false);
      onDisconnectClick === null || onDisconnectClick === void 0 || onDisconnectClick();
    },
    onClose: function onClose() {
      setProfileOpen(false);
    },
    address: account === null || account === void 0 ? void 0 : account.address,
    name: account === null || account === void 0 ? void 0 : account.name,
    avatar: avatar !== null && avatar !== void 0 ? avatar : {
      icon: chain !== null && chain !== void 0 && chain.icon ? /*#__PURE__*/_jsx("div", {
        className: "".concat(prefixCls, "-chain-icon"),
        children: chain === null || chain === void 0 ? void 0 : chain.icon
      }) : /*#__PURE__*/_jsx(UserOutlined, {
        className: "".concat(prefixCls, "-default-icon")
      })
    },
    balance: balance,
    modalProps: _typeof(profileModal) === 'object' ? profileModal : undefined
  });
  var content = buttonContent;
  var defaultMenuItems = useMemo(function () {
    return [{
      label: 'Copy Address',
      key: 'copyAddress',
      onClick: function onClick() {
        setProfileOpen(false);
        if (account !== null && account !== void 0 && account.address) {
          writeCopyText(account === null || account === void 0 ? void 0 : account.address).then(function () {
            messageApi.success('Address Copied!');
          });
        }
      },
      icon: /*#__PURE__*/_jsx(CopyOutlined, {})
    }, {
      label: intl.getMessage(intl.messages.disconnect),
      key: 'disconnect',
      onClick: function onClick() {
        setProfileOpen(false);
        onDisconnectClick === null || onDisconnectClick === void 0 || onDisconnectClick();
      },
      icon: /*#__PURE__*/_jsx(LoginOutlined, {})
    }];
  }, [account === null || account === void 0 ? void 0 : account.address, messageApi, onDisconnectClick]);
  var mergedMenuItems = useMemo(function () {
    if (!actionsMenu) {
      return [];
    }
    if (typeof actionsMenu === 'boolean') {
      return account ? defaultMenuItems : [];
    }
    if (actionsMenu.items) {
      return actionsMenu.items;
    }
    var combinedItems = account ? actionsMenu.extraItems ? [].concat(_toConsumableArray(actionsMenu.extraItems), _toConsumableArray(account ? defaultMenuItems : [])) : account ? defaultMenuItems : [] : actionsMenu.extraItems || [];
    return combinedItems;
  }, [actionsMenu, defaultMenuItems, account]);
  if (mergedMenuItems.length > 0) {
    content = /*#__PURE__*/_jsx(Dropdown, {
      open: showMenu,
      onOpenChange: setShowMenu,
      menu: {
        items: mergedMenuItems,
        onClick: onMenuItemClick
      },
      children: buttonContent
    });
  }
  var mergedTooltipCopyable = _typeof(tooltip) === 'object' ? tooltip.copyable !== false : !!tooltip;
  var tooltipTitle = tooltip && account !== null && account !== void 0 && account.address ? fillWith0x(account === null || account === void 0 ? void 0 : account.address) : '';
  if (_typeof(tooltip) === 'object' && typeof tooltip.title === 'string') {
    tooltipTitle = tooltip.title;
  }
  var main = /*#__PURE__*/_jsxs(_Fragment, {
    children: [contextHolder, tooltipTitle ? /*#__PURE__*/_jsx(ConnectButtonTooltip, _objectSpread(_objectSpread({
      intl: intl,
      copyable: mergedTooltipCopyable,
      title: tooltipTitle,
      prefixCls: prefixCls,
      __hashId__: hashId
    }, _typeof(tooltip) === 'object' ? tooltip : {}), {}, {
      children: content
    })) : content, profileModalContent]
  });
  return wrapSSR(main);
};
ConnectButton.displayName = 'ConnectButton';