function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React from 'react';
import { Space, Tooltip } from 'antd';
import { Mainnet } from '@ant-design/web3-assets';
import { fillAddressWith0x } from '@ant-design/web3-common';
import { Address } from "../address";
import useProvider from "../hooks/useProvider";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
export var getBrowserLink = function getBrowserLink(address) {
  var _chain$browser;
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'address';
  var chain = arguments.length > 2 ? arguments[2] : undefined;
  if (!chain || !((_chain$browser = chain.browser) !== null && _chain$browser !== void 0 && _chain$browser.getBrowserLink)) {
    throw new Error("getBrowserLink unsupported chain ".concat(chain === null || chain === void 0 ? void 0 : chain.id));
  }
  return chain.browser.getBrowserLink(address, type);
};
export var BrowserLink = function BrowserLink(props) {
  var _currentChain$browser;
  var icon = props.icon,
    ellipsis = props.ellipsis,
    address = props.address,
    href = props.href,
    type = props.type,
    chain = props.chain,
    name = props.name,
    _props$iconOnly = props.iconOnly,
    iconOnly = _props$iconOnly === void 0 ? false : _props$iconOnly;
  var _useProvider = useProvider({
      chain: chain
    }),
    _useProvider$chain = _useProvider.chain,
    currentChain = _useProvider$chain === void 0 ? Mainnet : _useProvider$chain;
  var mergedIcon = icon || (currentChain === null || currentChain === void 0 || (_currentChain$browser = currentChain.browser) === null || _currentChain$browser === void 0 ? void 0 : _currentChain$browser.icon) || (currentChain === null || currentChain === void 0 ? void 0 : currentChain.icon);
  var displayIcon = /*#__PURE__*/React.isValidElement(mergedIcon) ? /*#__PURE__*/React.cloneElement(mergedIcon, {
    style: _objectSpread(_objectSpread({}, props.iconStyle), /*#__PURE__*/React.isValidElement(mergedIcon) ? mergedIcon.props.style : {})
  }) : mergedIcon;
  var filledAddress = fillAddressWith0x(address);
  var browserLink = href !== null && href !== void 0 ? href : getBrowserLink(filledAddress, type, currentChain);
  var renderContent = function renderContent(content) {
    return /*#__PURE__*/_jsx(Tooltip, {
      title: filledAddress,
      children: /*#__PURE__*/_jsx("a", {
        href: browserLink,
        style: {
          display: 'inline-block'
        },
        children: /*#__PURE__*/_jsxs(Space, {
          size: "small",
          children: [displayIcon, !iconOnly && content]
        })
      })
    });
  };
  if (name) {
    return renderContent(name);
  }
  return renderContent( /*#__PURE__*/_jsx(Address, {
    ellipsis: ellipsis,
    address: filledAddress,
    tooltip: false
  }));
};