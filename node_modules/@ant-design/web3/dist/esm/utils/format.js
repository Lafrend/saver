export var fillWith0x = function fillWith0x() {
  var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var filledAddress = address.startsWith('0x') ? address : "0x".concat(address);
  return filledAddress;
};
export var formatAddress = function formatAddress() {
  var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var groupSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;
  var formattedGroups = [];
  var has0x = address.startsWith('0x');
  var formatText = has0x ? address.slice(2) : address;
  for (var i = 0; i < formatText.length; i += groupSize) {
    var group = formatText.slice(i, i + groupSize);
    formattedGroups.push(group);
  }
  var formattedText = formattedGroups.join(' ');
  return has0x ? "0x ".concat(formattedText) : formattedText;
};
export var formatBalance = function formatBalance(value, decimals, fixed) {
  var bigValue = typeof value === 'bigint' ? value : BigInt(value);
  var divisor = BigInt(Math.pow(10, decimals));
  var eth = bigValue / divisor;
  var ethFraction = bigValue % divisor;
  if (ethFraction === 0n && fixed === undefined) {
    return "".concat(eth);
  }
  var fractionStr = ethFraction.toString().padStart(decimals, '0');
  if (fixed === undefined) {
    return "".concat(eth, ".").concat(fractionStr.replace(/0+$/, ''));
  }
  fractionStr = fractionStr.substring(0, fixed).padEnd(fixed, '0');
  return "".concat(eth, ".").concat(fractionStr);
};