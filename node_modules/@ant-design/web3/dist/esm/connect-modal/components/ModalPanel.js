function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React from 'react';
import { mergeReactNodeProps } from "../utils";
import classNames from 'classnames';
import WalletList from "./WalletList";
import MainPanel from "./MainPanel";
import { ConfigContext } from 'antd/lib/config-provider';
import { ConnectModalContextProvider } from "../context";
import { useStyle } from "../style";
import useMode from "../hooks/useMode";
import useIntl from "../../hooks/useIntl";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var ModalPanel = function ModalPanel(props) {
  var title = props.title,
    footer = props.footer,
    walletList = props.walletList,
    groupOrder = props.groupOrder,
    guide = props.guide,
    mode = props.mode,
    onWalletSelected = props.onWalletSelected,
    locale = props.locale;
  var intl = useIntl('ConnectModal', locale);
  var _React$useState = React.useState('init'),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    panelRoute = _React$useState2[0],
    setPanelRoute = _React$useState2[1];
  var routeStack = React.useRef(['init']);
  var _React$useState3 = React.useState(),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    selectedWallet = _React$useState4[0],
    setSelectedWallet = _React$useState4[1];
  var _React$useContext = React.useContext(ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var prefixCls = getPrefixCls('web3-connect-modal');
  var _useStyle = useStyle(prefixCls),
    wrapSSR = _useStyle.wrapSSR,
    hashId = _useStyle.hashId;
  var mergedTitle = mergeReactNodeProps(title, /*#__PURE__*/_jsx("h2", {
    className: "".concat(prefixCls, "-title"),
    children: intl.messages.title
  }), function (node) {
    return /*#__PURE__*/_jsx("h2", {
      className: "".concat(prefixCls, "-title"),
      children: node
    });
  });
  var updatePanelRoute = React.useCallback(function (route) {
    var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (clear) {
      routeStack.current = ['init'];
    }
    setPanelRoute(route);
    routeStack.current.push(route);
  }, []);
  var updateSelectedWallet = React.useCallback(function (wallet, triggerConnect) {
    setSelectedWallet(wallet);
    if (wallet && triggerConnect) {
      onWalletSelected === null || onWalletSelected === void 0 || onWalletSelected(wallet);
    }
  }, [onWalletSelected]);
  var panelRouteBack = React.useCallback(function () {
    routeStack.current.pop();
    var route = routeStack.current[routeStack.current.length - 1];
    if (route === 'init') {
      updateSelectedWallet(undefined);
    }
    setPanelRoute(route);
  }, [updateSelectedWallet]);
  React.useEffect(function () {
    if (panelRoute === 'getWallet') {
      updateSelectedWallet(undefined);
    }
  }, [panelRoute, updateSelectedWallet]);
  var _useMode = useMode(mode),
    isSimple = _useMode.isSimple;
  return wrapSSR( /*#__PURE__*/_jsx(ConnectModalContextProvider, {
    value: {
      prefixCls: prefixCls,
      selectedWallet: selectedWallet,
      updateSelectedWallet: updateSelectedWallet,
      panelRoute: panelRoute,
      updatePanelRoute: updatePanelRoute,
      panelRouteBack: panelRouteBack,
      canBack: routeStack.current.length > 1,
      localeMessage: intl.messages,
      getMessage: intl.getMessage
    },
    children: /*#__PURE__*/_jsxs("div", {
      className: classNames("".concat(prefixCls, "-body"), _defineProperty({}, "".concat(prefixCls, "-body-simple"), isSimple), hashId),
      children: [(panelRoute === 'init' || !isSimple) && /*#__PURE__*/_jsxs("div", {
        className: classNames("".concat(prefixCls, "-list-panel")),
        children: [/*#__PURE__*/_jsx("div", {
          className: "".concat(prefixCls, "-header"),
          children: mergedTitle
        }), /*#__PURE__*/_jsx("div", {
          className: "".concat(prefixCls, "-list-container"),
          children: /*#__PURE__*/_jsx(WalletList, {
            walletList: walletList,
            groupOrder: groupOrder
          })
        }), footer && /*#__PURE__*/_jsx("div", {
          className: "".concat(prefixCls, "-footer"),
          children: footer
        })]
      }), !(panelRoute === 'init' && isSimple) && /*#__PURE__*/_jsx(MainPanel, {
        simple: isSimple,
        guide: guide,
        walletList: walletList
      })]
    })
  }));
};
export default ModalPanel;