function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useContext, useEffect, useState } from 'react';
import MainPanelHeader from "./MainPanelHeader";
import { connectModalContext } from "../context";
import { Button, QRCode, Space } from 'antd';
import { ArrowRightOutlined } from '@ant-design/icons';
import classNames from 'classnames';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var QrCode = function QrCode(props) {
  var wallet = props.wallet,
    simple = props.simple,
    download = props.download;
  var _useContext = useContext(connectModalContext),
    prefixCls = _useContext.prefixCls,
    updatePanelRoute = _useContext.updatePanelRoute,
    updateSelectedWallet = _useContext.updateSelectedWallet,
    localeMessage = _useContext.localeMessage,
    getMessage = _useContext.getMessage;
  var _useState = useState('QR code not ready'),
    _useState2 = _slicedToArray(_useState, 2),
    qrCodeValue = _useState2[0],
    setQrCodeValue = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];
  useEffect(function () {
    if (wallet) {
      var _wallet$getQrCode;
      if (download) {
        if (wallet !== null && wallet !== void 0 && wallet.app) {
          setQrCodeValue(wallet.app.link);
        } else {
          console.error("wallet ".concat(wallet.name, " app is undefined, please check your config."));
        }
        return;
      }
      setLoading(true);
      (_wallet$getQrCode = wallet.getQrCode) === null || _wallet$getQrCode === void 0 || _wallet$getQrCode.call(wallet).then(function (_ref) {
        var uri = _ref.uri;
        setQrCodeValue(uri);
        setLoading(false);
      });
    }
  }, [wallet]);
  var handleGetWallet = function handleGetWallet() {
    updateSelectedWallet(wallet);
    updatePanelRoute('wallet');
  };
  return /*#__PURE__*/_jsxs("div", {
    className: "".concat(prefixCls, "-qr-code-container"),
    children: [/*#__PURE__*/_jsx(MainPanelHeader, {
      title: getMessage(download ? localeMessage.qrCodePanelTitleForDownload : localeMessage.qrCodePanelTitleForScan, {
        walletName: wallet.name
      })
    }), /*#__PURE__*/_jsxs("div", {
      className: "".concat(prefixCls, "-qr-code-box"),
      children: [/*#__PURE__*/_jsx(QRCode, {
        className: "".concat(prefixCls, "-qr-code"),
        value: qrCodeValue,
        status: !loading ? 'active' : 'loading',
        size: simple ? 332 : 400,
        iconSize: 60,
        type: "svg"
      }), /*#__PURE__*/_jsx("a", {
        className: classNames("".concat(prefixCls, "-qr-code-link"), _defineProperty({}, "".concat(prefixCls, "-qr-code-link-loading"), loading)),
        target: "_blank",
        href: !loading ? qrCodeValue : undefined,
        rel: "noreferrer",
        children: /*#__PURE__*/_jsxs(Space, {
          children: [/*#__PURE__*/_jsx("span", {
            children: download ? localeMessage.qrCodePanelLinkForDownload : localeMessage.qrCodePanelLinkForConnect
          }), /*#__PURE__*/_jsx(ArrowRightOutlined, {})]
        })
      })]
    }), /*#__PURE__*/_jsx("div", {
      className: "".concat(prefixCls, "-qr-code-tips"),
      children: download ? /*#__PURE__*/_jsx("div", {
        className: "".concat(prefixCls, "-qr-code-tips-download"),
        children: localeMessage.qrCodePanelDownloadTipForReady
      }) : /*#__PURE__*/_jsxs(_Fragment, {
        children: [localeMessage.qrCodePanelDownloadTipForNotReady, " ", wallet.name, "?", /*#__PURE__*/_jsx(Button, {
          type: "default",
          className: "".concat(prefixCls, "-get-wallet-btn"),
          onClick: handleGetWallet,
          children: localeMessage.getWalletBtnText
        })]
      })
    })]
  });
};
export default QrCode;