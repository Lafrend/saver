function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useContext } from 'react';
import { connectModalContext } from "../context";
import MainPanelHeader from "./MainPanelHeader";
import { Avatar, Button, List, message } from 'antd';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var GetWalletPanel = function GetWalletPanel(props) {
  var _props$walletList = props.walletList,
    walletList = _props$walletList === void 0 ? [] : _props$walletList;
  var _message$useMessage = message.useMessage(),
    _message$useMessage2 = _slicedToArray(_message$useMessage, 2),
    contextHolder = _message$useMessage2[1];
  var _useContext = useContext(connectModalContext),
    prefixCls = _useContext.prefixCls,
    updateSelectedWallet = _useContext.updateSelectedWallet,
    updatePanelRoute = _useContext.updatePanelRoute,
    localeMessage = _useContext.localeMessage;
  var list = /*#__PURE__*/_jsxs(_Fragment, {
    children: [contextHolder, /*#__PURE__*/_jsx("div", {
      className: "".concat(prefixCls, "-list"),
      children: /*#__PURE__*/_jsx(List, {
        itemLayout: "horizontal",
        dataSource: walletList,
        renderItem: function renderItem(item) {
          return /*#__PURE__*/_jsx(List.Item, {
            className: "".concat(prefixCls, "-item"),
            actions: [/*#__PURE__*/_jsx(Button, {
              type: "default",
              shape: "round",
              className: "".concat(prefixCls, "-get-wallet-btn"),
              onClick: function onClick() {
                updateSelectedWallet(item);
                updatePanelRoute('wallet');
              },
              children: localeMessage.getWalletBtnText
            }, "get")],
            children: /*#__PURE__*/_jsx(List.Item.Meta, {
              avatar: /*#__PURE__*/_jsx(Avatar, {
                size: 48,
                shape: "square",
                src: item.icon,
                children: item.name[0]
              }),
              title: item.name,
              description: item.remark
            })
          });
        }
      })
    }), /*#__PURE__*/_jsxs("div", {
      className: "".concat(prefixCls, "-info"),
      children: [/*#__PURE__*/_jsx("h3", {
        children: localeMessage.getWalletPanelInfoTitle
      }), /*#__PURE__*/_jsx("div", {
        children: localeMessage.getWalletPanelInfoDesc
      })]
    })]
  });
  return /*#__PURE__*/_jsxs("div", {
    className: "".concat(prefixCls, "-get-wallet-panel"),
    children: [/*#__PURE__*/_jsx(MainPanelHeader, {
      title: localeMessage.getWalletPanelTitle
    }), list]
  });
};
export default GetWalletPanel;