function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { mergeToken } from 'antd/lib/theme/internal';
import { useStyle as useAntdStyle } from "../../theme/useStyle";
import { TinyColor } from '@ctrl/tinycolor';
import { isDarkTheme } from "../utils";

/** Component only token. Which will handle additional calculation of alias token */

var resetStyle = function resetStyle(token) {
  var _$concat;
  var componentCls = token.web3ComponentsCls;
  var isDark = isDarkTheme(token);
  return [_defineProperty({}, "".concat(componentCls), (_$concat = {
    '.ant-modal-content': {
      padding: 0
    }
  }, _defineProperty(_$concat, '.ant-list-split .ant-list-item', {
    borderBlockEnd: 'none'
  }), _defineProperty(_$concat, '.ant-list .ant-list-item', {
    paddingBlock: 5
  }), _$concat))];
};
var getThemeStyle = function getThemeStyle(token) {
  var _$concat2, _$concat3, _$concat5, _$concat8, _$concat9, _$concat11, _$concat12, _$concat19, _$concat20, _$concat21, _$concat25, _$concat26, _$concat27, _$concat28, _$concat29, _$concat30, _ref2;
  var componentCls = token.web3ComponentsCls;
  var isDark = isDarkTheme(token);
  return [(_ref2 = {}, _defineProperty(_ref2, "".concat(componentCls), {
    overflow: 'hidden',
    paddingBlockEnd: 0,
    '.ant-modal-content': {
      background: token.colorBgContainer
    }
  }), _defineProperty(_ref2, "".concat(componentCls, "-body"), (_$concat30 = {
    display: 'flex',
    justifyContent: 'space-between',
    position: 'relative'
  }, _defineProperty(_$concat30, "".concat(componentCls, "-title"), {
    fontSize: 20,
    lineHeight: '28px',
    fontWeight: 600,
    // color: token.colorText,
    backgroundImage: "linear-gradient(90deg, ".concat(token.modalTitleStartColor, " 0%, ").concat(token.modalTitleEndColor, " 16%, ").concat(token.modalTitleStartColor, " 48%, ").concat(token.modalTitleEndColor, " 67%, ").concat(token.modalTitleStartColor, " 85%, ").concat(token.modalTitleEndColor, " 96%, ").concat(token.modalTitleStartColor, " 100%)"),
    display: 'inline-block',
    backgroundClip: 'text',
    WebkitBackgroundClip: 'text',
    WebkitTextFillColor: 'transparent',
    margin: 0,
    paddingInline: 6,
    color: 'red'
  }), _defineProperty(_$concat30, "".concat(componentCls, "-list-panel, ").concat(componentCls, "-main-panel"), {
    boxSizing: 'border-box'
  }), _defineProperty(_$concat30, "".concat(componentCls, "-list-panel"), (_$concat8 = {
    paddingInline: 18,
    paddingBlock: 24,
    width: 268,
    flexShrink: 0,
    borderRight: "1px solid ".concat(token.splitColor),
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    boxSizing: 'border-box'
  }, _defineProperty(_$concat8, "".concat(componentCls, "-header"), {
    height: 30
  }), _defineProperty(_$concat8, "".concat(componentCls, "-list-container"), _defineProperty({
    flexGrow: 1,
    marginBlock: token.marginSM,
    overflow: 'auto'
  }, "".concat(componentCls, "-wallet-list"), _defineProperty({}, "".concat(componentCls, "-group"), (_$concat5 = {
    marginBlockEnd: token.marginSM
  }, _defineProperty(_$concat5, "".concat(componentCls, "-group-title"), {
    color: token.groupTextColor,
    fontSize: 14,
    paddingInline: 6
  }), _defineProperty(_$concat5, "".concat(componentCls, "-group-content"), _defineProperty({
    marginBlockStart: 8
  }, "".concat(componentCls, "-wallet-item"), (_$concat3 = {
    cursor: 'pointer',
    paddingInline: 6,
    borderRadius: 8,
    transition: 'background .3s, color .3s',
    marginBlockEnd: 5,
    border: 'none'
  }, _defineProperty(_$concat3, "".concat(componentCls, "-extra"), {
    fontSize: token.fontSizeSM,
    color: token.colorTextDescription
  }), _defineProperty(_$concat3, "".concat(componentCls, "-content"), (_$concat2 = {
    display: 'flex',
    alignItems: 'center'
  }, _defineProperty(_$concat2, "".concat(componentCls, "-icon"), {
    borderRadius: 8,
    overflow: 'hidden',
    width: token.iconSize,
    height: token.iconSize,
    fontSize: token.iconSize,
    lineHeight: 1,
    img: {
      width: '100%',
      height: '100%'
    }
  }), _defineProperty(_$concat2, "".concat(componentCls, "-name"), {
    fontSize: token.fontSizeLG,
    justifySelf: 'flex-start',
    marginInlineStart: token.marginSM,
    color: token.colorText
  }), _$concat2)), _defineProperty(_$concat3, '&:last-child', {
    marginBlockEnd: 0
  }), _defineProperty(_$concat3, '&:hover', {
    background: token.hoverBg
  }), _defineProperty(_$concat3, '&.selected', _defineProperty({
    background: token.selectedBg
  }, "".concat(componentCls, "-name"), {
    color: token.selectedColor
  })), _$concat3))), _$concat5)))), _defineProperty(_$concat8, "".concat(componentCls, "-footer"), {
    color: token.listItemDescriptionColor
  }), _$concat8)), _defineProperty(_$concat30, "".concat(componentCls, "-main-panel"), (_$concat27 = {
    flexGrow: 1,
    boxSizing: 'border-box',
    paddingBlock: token.paddingLG,
    paddingInline: token.paddingXL
  }, _defineProperty(_$concat27, "".concat(componentCls, "-main-panel-header"), (_$concat9 = {
    display: 'flex'
  }, _defineProperty(_$concat9, "".concat(componentCls, "-main-panel-header-back"), {
    width: 24,
    height: 24,
    cursor: 'pointer',
    borderRadius: 4,
    transition: 'background .3s',
    textAlign: 'center',
    color: token.colorText,
    '&:hover': {
      background: token.hoverBg
    }
  }), _defineProperty(_$concat9, "".concat(componentCls, "-main-panel-header-title"), {
    flex: 1,
    textAlign: 'center',
    fontSize: token.fontSizeLG,
    color: token.colorText
  }), _$concat9)), _defineProperty(_$concat27, "".concat(componentCls, "-guide-panel"), _defineProperty({
    marginBlockStart: 48
  }, "".concat(componentCls, "-guide-title"), {
    textAlign: 'center',
    fontSize: token.fontSizeXL,
    color: token.colorText,
    marginBlock: 0
  })), _defineProperty(_$concat27, "".concat(componentCls, "-guide-list"), _defineProperty({
    marginBlock: 28,
    maxHeight: 300,
    overflow: 'auto'
  }, "".concat(componentCls, "-guide-item"), (_$concat12 = {
    display: 'flex',
    alignItems: 'center',
    marginBlockEnd: 32,
    '&:last-child': {
      marginBlockEnd: 0
    }
  }, _defineProperty(_$concat12, "".concat(componentCls, "-guide-item-icon"), {
    flexShrink: 0,
    width: 56,
    height: 56
  }), _defineProperty(_$concat12, "".concat(componentCls, "-guide-item-content"), (_$concat11 = {
    marginInlineStart: 12
  }, _defineProperty(_$concat11, "".concat(componentCls, "-guide-item-title"), {
    fontSize: token.fontSizeLG,
    color: token.colorText,
    marginBlock: 0
  }), _defineProperty(_$concat11, "".concat(componentCls, "-guide-item-description"), {
    fontSize: token.fontSizeSM,
    color: token.listItemDescriptionColor,
    marginBlockStart: 4,
    wordBreak: 'break-word'
  }), _$concat11)), _$concat12))), _defineProperty(_$concat27, "".concat(componentCls, "-get-btn"), _defineProperty({
    background: isDark ? new TinyColor(token.colorWhite).setAlpha(0.15).toRgbString() : token.colorPrimary,
    color: token.colorTextLightSolid,
    opacity: 0.8,
    fontSize: token.fontSizeLG
  }, '&:hover', {
    opacity: 1
  })), _defineProperty(_$concat27, "".concat(componentCls, "-more"), _defineProperty({
    color: token.colorText,
    fontSize: token.fontSizeLG,
    textAlign: 'center',
    marginBlockStart: 16,
    opacity: 0.8
  }, '&:hover', {
    opacity: 1
  })), _defineProperty(_$concat27, "".concat(componentCls, "-get-wallet-panel"), (_$concat19 = {
    position: 'relative',
    height: '100%'
  }, _defineProperty(_$concat19, "".concat(componentCls, "-list"), _defineProperty({
    marginBlockStart: 32,
    minHeight: 286,
    overflow: 'auto'
  }, "".concat(componentCls, "-item"), _defineProperty({
    marginBlockEnd: 24,
    '&:last-child': {
      marginBlockEnd: 0
    },
    '.anticon': {
      fontSize: 48,
      '>svg': {
        width: '100%',
        height: '100%'
      }
    },
    '.ant-list-item-meta-title': {
      color: token.colorText
    },
    '.ant-list-item-meta-description': {
      color: token.listItemDescriptionColor
    }
  }, "".concat(componentCls, "-get-wallet-btn"), _defineProperty({
    width: 66,
    height: 32,
    lineHeight: 0,
    fontSize: token.fontSizeLG
  }, '&:hover', {
    borderColor: isDark ? token.colorWhite : token.colorPrimary,
    color: isDark ? token.colorWhite : token.colorPrimary
  })))), _defineProperty(_$concat19, "".concat(componentCls, "-info"), {
    width: 312,
    marginInline: 'auto',
    marginTop: token.marginXXL,
    textAlign: 'center',
    h3: {
      fontSize: token.fontSizeLG,
      color: token.colorText,
      marginBlockEnd: 16
    },
    p: {
      fontSize: token.fontSizeSM,
      color: token.groupTextColor,
      lineHeight: 1.5
    }
  }), _$concat19)), _defineProperty(_$concat27, "".concat(componentCls, "-card-list"), _defineProperty({
    marginBlockStart: 25
  }, "".concat(componentCls, "-card-item"), (_$concat21 = {
    width: '100%',
    height: 220,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginBlockEnd: 16,
    boxSizing: 'border-box',
    paddingInline: 30,
    background: token.cardBg,
    borderRadius: 16,
    cursor: 'pointer',
    border: "1px solid transparent",
    transition: 'border-color .3s',
    '&:hover': {
      borderColor: isDark ? token.colorWhite : token.colorPrimary
    }
  }, _defineProperty(_$concat21, "".concat(componentCls, "-card-icon"), {
    width: 64,
    height: 64,
    fontSize: 64,
    lineHeight: 1,
    flexShrink: 0,
    img: {
      width: '100%',
      height: '100%'
    }
  }), _defineProperty(_$concat21, "".concat(componentCls, "-card-content"), (_$concat20 = {
    marginInlineStart: 12
  }, _defineProperty(_$concat20, "".concat(componentCls, "-card-title"), {
    fontSize: token.fontSizeLG,
    color: token.colorText
  }), _defineProperty(_$concat20, "".concat(componentCls, "-card-description"), {
    fontSize: token.fontSize,
    color: token.listItemDescriptionColor
  }), _$concat20)), _defineProperty(_$concat21, '&:last-child', {
    marginBlockEnd: 0
  }), _$concat21))), _defineProperty(_$concat27, "".concat(componentCls, "-qr-code-container"), (_$concat26 = {}, _defineProperty(_$concat26, "".concat(componentCls, "-qr-code-box"), _defineProperty({
    marginBlockStart: 12,
    marginInline: 'auto'
  }, "".concat(componentCls, "-qr-code"), {
    marginInline: 'auto'
  })), _defineProperty(_$concat26, "".concat(componentCls, "-qr-code-link"), {
    marginTop: token.marginSM,
    fontSize: token.fontSizeLG,
    textAlign: 'center',
    display: 'block'
  }), _defineProperty(_$concat26, "".concat(componentCls, "-qr-code-link-loading"), {
    cursor: 'not-allowed',
    color: token.colorTextDisabled
  }), _defineProperty(_$concat26, "".concat(componentCls, "-qr-code-tips"), (_$concat25 = {
    color: token.listItemDescriptionColor,
    fontSize: token.fontSizeLG,
    position: 'relative',
    width: '100%',
    marginBlockStart: token.marginSM
  }, _defineProperty(_$concat25, "".concat(componentCls, "-qr-code-tips-download"), {
    textAlign: 'center'
  }), _defineProperty(_$concat25, "".concat(componentCls, "-get-wallet-btn"), _defineProperty({
    position: 'absolute',
    right: 0,
    top: '50%',
    transform: 'translateY(-50%)',
    width: 66,
    height: 40,
    lineHeight: 0
  }, '&:hover', {
    borderColor: isDark ? token.colorWhite : token.colorPrimary,
    color: isDark ? token.colorWhite : token.colorPrimary
  })), _$concat25)), _$concat26)), _$concat27)), _defineProperty(_$concat30, "&".concat(componentCls, "-body-simple"), (_$concat29 = {}, _defineProperty(_$concat29, "".concat(componentCls, "-list-panel"), {
    borderRight: 'none',
    width: '100%'
  }), _defineProperty(_$concat29, "".concat(componentCls, "-main-panel"), (_$concat28 = {
    paddingInline: token.paddingLG,
    background: token.colorBgContainer
  }, _defineProperty(_$concat28, "".concat(componentCls, "-qr-code-box"), {
    marginBlockStart: 24
  }), _defineProperty(_$concat28, "".concat(componentCls, "-qr-code-tips"), {
    marginBlockStart: token.marginXL
  }), _$concat28)), _$concat29)), _$concat30)), _ref2)];
};
var genModalStyle = function genModalStyle(token) {
  return [
  // =========================== Reset ===========================
  resetStyle(token),
  // =========================== Modal ===========================
  getThemeStyle(token)];
};
export function useStyle(prefixCls) {
  return useAntdStyle('ConnectModal', function (token) {
    var isDark = isDarkTheme(token);
    var connectModalToken = mergeToken(token, {
      selectedBg: isDark ? token.colorWhite : token.colorPrimary,
      selectedColor: token.colorBgContainer,
      hoverBg: new TinyColor(isDark ? token.colorWhite : token.colorPrimary).setAlpha(0.1).onBackground(token.colorBgContainer).toRgbString(),
      splitColor: new TinyColor(token.colorText).setAlpha(0.06).toRgbString(),
      modalTitleStartColor: isDark ? token.colorWhite : token.colorPrimary,
      modalTitleEndColor: new TinyColor('#000').setAlpha(0.85).onBackground(token.colorWhite).toRgbString(),
      groupTextColor: new TinyColor(token.colorText).setAlpha(0.65).toRgbString(),
      listItemDescriptionColor: new TinyColor(token.colorText).setAlpha(0.65).toRgbString(),
      cardBg: new TinyColor(token.colorText).setAlpha(0.1).toRgbString(),
      iconSize: token.sizeXL,
      web3ComponentsCls: ".".concat(prefixCls)
    });
    return [genModalStyle(connectModalToken)];
  });
}