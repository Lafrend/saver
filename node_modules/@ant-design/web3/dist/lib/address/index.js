"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Address = void 0;
var _icons = require("@ant-design/icons");
var _antd = require("antd");
var _react = _interopRequireWildcard(require("react"));
var _style = require("./style");
var _classnames = _interopRequireDefault(require("classnames"));
var _utils = require("../utils");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const Address = props => {
  const {
    ellipsis,
    address,
    copyable,
    tooltip,
    format = false,
    children
  } = props;
  const [messageApi, contextHolder] = _antd.message.useMessage();
  const {
    getPrefixCls
  } = (0, _react.useContext)(_antd.ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-address');
  const {
    wrapSSR,
    hashId
  } = (0, _style.useStyle)(prefixCls);
  const mergedFormat = (0, _react.useMemo)(() => {
    if (typeof format === 'function') {
      return format;
    }
    if (format) {
      return _utils.formatAddress;
    }
    return input => input;
  }, [format]);
  const isEllipsis = !!ellipsis;
  const {
    headClip = 6,
    tailClip = 4
  } = typeof ellipsis !== 'object' ? {
    headClip: 6,
    tailClip: 4
  } : ellipsis;
  if (!address) {
    return null;
  }
  const filledAddress = (0, _utils.fillWith0x)(address);
  const formattedAddress = mergedFormat(filledAddress);
  const displayTooltip = tooltip === undefined || tooltip === true ? filledAddress : tooltip;
  return wrapSSR( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [contextHolder, /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Space, {
      className: (0, _classnames.default)(prefixCls, hashId),
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Tooltip, {
        title: displayTooltip,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          className: `${prefixCls}-text`,
          children: children ?? (isEllipsis ? `${filledAddress.slice(0, headClip)}...${filledAddress.slice(-tailClip)}` : formattedAddress)
        })
      }), copyable && /*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.CopyOutlined, {
        title: "Copy Address",
        onClick: () => {
          (0, _utils.writeCopyText)(filledAddress).then(() => {
            messageApi.success('Address Copied!');
          });
        }
      })]
    })]
  }));
};
exports.Address = Address;