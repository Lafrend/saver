"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _MainPanelHeader = _interopRequireDefault(require("./MainPanelHeader"));
var _context = require("../context");
var _antd = require("antd");
var _icons = require("@ant-design/icons");
var _classnames = _interopRequireDefault(require("classnames"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const QrCode = props => {
  const {
    wallet,
    simple,
    download
  } = props;
  const {
    prefixCls,
    updatePanelRoute,
    updateSelectedWallet,
    localeMessage,
    getMessage
  } = (0, _react.useContext)(_context.connectModalContext);
  const [qrCodeValue, setQrCodeValue] = (0, _react.useState)('QR code not ready');
  const [loading, setLoading] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    if (wallet) {
      if (download) {
        if (wallet?.app) {
          setQrCodeValue(wallet.app.link);
        } else {
          console.error(`wallet ${wallet.name} app is undefined, please check your config.`);
        }
        return;
      }
      setLoading(true);
      wallet.getQrCode?.().then(({
        uri
      }) => {
        setQrCodeValue(uri);
        setLoading(false);
      });
    }
  }, [wallet]);
  const handleGetWallet = () => {
    updateSelectedWallet(wallet);
    updatePanelRoute('wallet');
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: `${prefixCls}-qr-code-container`,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_MainPanelHeader.default, {
      title: getMessage(download ? localeMessage.qrCodePanelTitleForDownload : localeMessage.qrCodePanelTitleForScan, {
        walletName: wallet.name
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: `${prefixCls}-qr-code-box`,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.QRCode, {
        className: `${prefixCls}-qr-code`,
        value: qrCodeValue,
        status: !loading ? 'active' : 'loading',
        size: simple ? 332 : 400,
        iconSize: 60,
        type: "svg"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
        className: (0, _classnames.default)(`${prefixCls}-qr-code-link`, {
          [`${prefixCls}-qr-code-link-loading`]: loading
        }),
        target: "_blank",
        href: !loading ? qrCodeValue : undefined,
        rel: "noreferrer",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Space, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: download ? localeMessage.qrCodePanelLinkForDownload : localeMessage.qrCodePanelLinkForConnect
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.ArrowRightOutlined, {})]
        })
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `${prefixCls}-qr-code-tips`,
      children: download ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: `${prefixCls}-qr-code-tips-download`,
        children: localeMessage.qrCodePanelDownloadTipForReady
      }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [localeMessage.qrCodePanelDownloadTipForNotReady, " ", wallet.name, "?", /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
          type: "default",
          className: `${prefixCls}-get-wallet-btn`,
          onClick: handleGetWallet,
          children: localeMessage.getWalletBtnText
        })]
      })
    })]
  });
};
var _default = exports.default = QrCode;