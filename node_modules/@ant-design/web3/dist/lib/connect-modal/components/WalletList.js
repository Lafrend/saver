"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _antd = require("antd");
var _utils = require("../utils");
var _context = require("../context");
var _classnames = _interopRequireDefault(require("classnames"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const WalletList = props => {
  const {
    walletList = [],
    groupOrder
  } = props;
  const {
    prefixCls,
    updateSelectedWallet,
    selectedWallet,
    updatePanelRoute
  } = (0, _react.useContext)(_context.connectModalContext);
  const dataSource = (0, _react.useMemo)(() => {
    const result = {};
    walletList.forEach(wallet => {
      const {
        group = 'More'
      } = wallet;
      if (!result[group]) {
        result[group] = [];
      }
      result[group].push(wallet);
    });
    return result;
  }, [walletList]);
  const groupKeys = (0, _react.useMemo)(() => Object.keys(dataSource).sort(groupOrder ?? _utils.defaultGroupOrder), [dataSource, groupOrder]);
  const [messageApi, contextHolder] = _antd.message.useMessage();
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: `${prefixCls}-wallet-list`,
    children: [contextHolder, groupKeys.map(group => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: `${prefixCls}-group`,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: `${prefixCls}-group-title`,
        children: group
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: `${prefixCls}-group-content`,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.List, {
          itemLayout: "horizontal",
          dataSource: dataSource[group],
          rowKey: "key",
          renderItem: item => /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.List.Item, {
            className: (0, _classnames.default)(`${prefixCls}-wallet-item`, {
              selected: item.key !== undefined ? selectedWallet?.key === item.key : selectedWallet?.name === item.name
            }),
            onClick: async () => {
              const hasWalletReady = await item.hasWalletReady?.();
              if (hasWalletReady) {
                // wallet is ready, call ConnectModal's onWalletSelected
                updateSelectedWallet(item, true);
                if (item.getQrCode) {
                  // can use qr code to connect
                  updatePanelRoute('qrCode', true);
                }
                return;
              }

              // wallet not ready
              // go to wallet page
              updateSelectedWallet(item);
              updatePanelRoute('wallet', true);
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: `${prefixCls}-content`,
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: `${prefixCls}-icon`,
                children: typeof item.icon === 'string' || item.icon === undefined ? /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                  src: item.icon,
                  alt: item.name
                }) : item.icon
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: `${prefixCls}-name`,
                children: item.name
              })]
            })
          })
        })
      })]
    }, group))]
  });
};
var _default = exports.default = WalletList;