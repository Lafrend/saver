"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Connector = void 0;
var _react = _interopRequireWildcard(require("react"));
var _ = require("./..");
var _antd = require("antd");
var _useProvider = _interopRequireDefault(require("../hooks/useProvider"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const Connector = props => {
  const {
    children,
    modalProps,
    onConnect,
    onConnected,
    onDisconnect,
    onDisconnected,
    onChainSwitched
  } = props;
  const {
    availableWallets,
    connect,
    disconnect,
    account,
    availableChains,
    chain,
    switchChain,
    balance
  } = (0, _useProvider.default)(props);
  const [open, setOpen] = _react.default.useState(false);
  const [loading, setLoading] = _react.default.useState(false);
  const [messageApi, contextHolder] = _antd.message.useMessage();
  const connectWallet = async wallet => {
    onConnect?.();
    try {
      setLoading(true);
      await connect?.(wallet);
      onConnected?.();
      setOpen(false);
    } catch (e) {
      messageApi.error(e.message);
      console.error(e);
    } finally {
      setLoading(false);
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [contextHolder, /*#__PURE__*/_react.default.cloneElement(children, {
      account,
      onConnectClick: () => {
        setOpen(true);
      },
      onDisconnectClick: () => {
        setLoading(true);
        onDisconnect?.();
        disconnect?.().then(() => {
          onDisconnected?.();
          setLoading(false);
        });
      },
      balance,
      availableChains,
      chain,
      onSwitchChain: async c => {
        await switchChain?.(c);
        onChainSwitched?.(c);
      },
      loading,
      ...( /*#__PURE__*/(0, _react.isValidElement)(children) ? children.props : {})
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.ConnectModal, {
      open: open,
      walletList: availableWallets,
      onWalletSelected: async wallet => {
        if (!wallet.getQrCode) {
          // not need show qr code, hide immediately
          setOpen(false);
        }
        await connectWallet(wallet);
      },
      ...modalProps,
      onCancel: e => {
        modalProps?.onCancel?.(e);
        setOpen(false);
        setLoading(false);
      }
    })]
  });
};
exports.Connector = Connector;