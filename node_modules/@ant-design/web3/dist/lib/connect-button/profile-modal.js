"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProfileModal = void 0;
var _react = _interopRequireWildcard(require("react"));
var _antd = require("antd");
var _classnames = _interopRequireDefault(require("classnames"));
var _ = require("./..");
var _utils = require("../utils");
var _cryptoPrice = require("../crypto-price");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const ProfileModal = ({
  className,
  intl,
  __hashId__,
  open,
  onClose,
  onDisconnect,
  avatar,
  name,
  address,
  modalProps,
  balance
}) => {
  const {
    getPrefixCls
  } = (0, _react.useContext)(_antd.ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-connect-button-profile-modal');
  const [messageApi, contextHolder] = _antd.message.useMessage();
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [contextHolder, /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Modal, {
      footer: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: (0, _classnames.default)(`${prefixCls}-footer`, __hashId__),
        children: [address ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
          onClick: () => {
            (0, _utils.writeCopyText)(address).then(() => {
              messageApi.success(intl.getMessage(intl.messages.addressCopied));
            });
          },
          children: intl.getMessage(intl.messages.copyAddress)
        }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
          onClick: onDisconnect,
          children: intl.getMessage(intl.messages.disconnect)
        })]
      }),
      width: 280,
      ...modalProps,
      onCancel: onClose,
      className: (0, _classnames.default)(className, __hashId__, prefixCls),
      styles: {
        ...modalProps?.styles,
        body: {
          textAlign: 'center',
          ...modalProps?.styles?.body
        }
      },
      open: open,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Space, {
        align: "center",
        direction: "vertical",
        children: [avatar ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Avatar, {
          ...avatar
        }) : null, name ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: (0, _classnames.default)(`${prefixCls}-name`, __hashId__),
          children: name
        }) : null, address ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Address, {
          ellipsis: false,
          address: address,
          tooltip: false,
          children: balance && /*#__PURE__*/(0, _jsxRuntime.jsx)(_cryptoPrice.CryptoPrice, {
            ...balance
          })
        }) : null]
      })
    })]
  });
};
exports.ProfileModal = ProfileModal;
ProfileModal.displayName = 'ProfileModal';